def create_data(df,attribute):
    '''Creates cumsum and cdf columns on the input dataframe using the attribute column to be used to plot a cumulative distribution function chart
    :param df: the dataframe with the data to be used for the cdf creation
    :param attribute: the column name of the attribute to be used for the calculation of the cdf
    :return: dataframe
    '''
    # We sort the values from the smallest to the largest as per the attribute
    data = df.sort_values(by=[f'{attribute}'])
    # We create a cumulative sum
    data['cumsum'] = data.reset_index().index
    # we create a percentage based on the cumsum and the total length of the df
    all_rows = len(data.index)
    data['cdf'] = data['cumsum']*100 / all_rows 
    return data

def create_summary(data,attribute):
    '''Creates a dataframe with information to be appended below a cdf graph
    :param data: the dataframe with the data that we will use to create the cdf graph and the summary table
    :param attribute_cdf: the attribute that we've used to calculate the cdf and of which we want to show 
    
    # We get the values for the information that we will put into the table for the graph
    col1_example = data['col1'].nunique()
    col2_example = data['col2'].nunique()
    
    # We get the count, mean, min, max of the attribute that we will use to create the cdf
    count = len(data.index)
    mean = round(cdf_df[f'{attribute}'].mean(),2)
    median = round(cdf_df[f'{attribute}'].median(),2)
    min = round(cdf_df[f'{attribute}'].min(),2)
    max = round(cdf_df[f'{attribute}'].max(),2)
    
    # We create a list with the information
    summary_data = [col1_example,col2_example,count,mean,median,min,max]
    summary_columns = ['col1','col2','count','mean','median','min','max']

    # We create a dataframe with the summary table
    summary = pd.DataFrame(data = [header_data], columns = header_columns)

    return summary

def density_function_plot(path,data,summary,name_graph,attribute):
    """Create a plot using the data and summary dataframes
    :param path: the path where the plot will be saved
    :param data: a dataframe that contains all required data to create the plot
    :param summary: a dataframe that contains summary info for the plots 
    :param name_graph: the name of the graph
    :param attribute: the name of the attribute to create a cdf plot for   
    """      
    # We set the characteristics of the plot
    gridsize = (4,4)
    fig = plt.figure(figsize = (12.8,9.6))
    plt.Figure(dpi=500)
    
    # We create 2 axes: ax1 for the top part where it will hold the graph and ax3 for the summary table
    ax1 = plt.subplot2grid(gridsize,(0,0),colspan = 4, rowspan = 3)
    ax3 = plt.subplot2grid(gridsize, (3, 0),colspan = 4, rowspan = 1)
        
    # We define ax1 as the current axe on the plot
    plt.sca(ax1)        
        
    # we plot a kde graph based on a dataframe
    data[f'{attribute}'].plot.kde(title = f'Prob and Cum (PDF/CDF) Density Functions of {name_graph} and {attribute}',ax=ax1)
  
    # we define the axises
    ax1.set_xlabel(f'{name_graph} {attribute}', fontsize = 16)
    ax1.set_ylabel("PDF Frecuency",color="blue",fontsize=16)
        
    # We create a twin object for two different y-axis on the sample plot
    ax2=ax1.twinx()
        
    # We plot the cdf (cumulative distribution function)
    ax2.plot(data[f'{attribute}'], data['cdf'],color="green")
    # We name the Y axis
    ax2.set_ylabel("% of measurements",color="red",fontsize=16)
        
    # We set ax3 as the current axes 
    plt.sca(ax3)
    # We hide all the axises and borders
    ax3.get_xaxis().set_visible(False)
    ax3.get_yaxis().set_visible(False)
    plt.box(on=None)
    
    # We use the summary df to create a table, the colWidths paramater needs to reflect the number of columns and the width of the content in the summary df
    table = plt.table(cellText = summary.values,colLabels = summary.columns.tolist(),cellLoc = 'center', rowLoc = 'center',loc='center'\
        ,colWidths=[0.15,0.15,0.1,0.1,0.1,0.1]
    )
       
    # We set auto set font size to false to speed up the canvas drawing process
    table.auto_set_font_size(False)    
        
    # We increase the scale of the row height
    table.scale(1, 2)
    
    # We save and close the figure
    plt.savefig(f"{path}/cdf_{name_graph}_{attribute}.jpg")
    plt.close()



















def density_function_plot(path,header,data,start_year,end_year,name_graph,attribute):
    """Create a plot using the header and the data dataframes for n1 songs
    :param path: the path to where the plot will be saved
    :param data: a dataframe that contains all measurement points for all characteristics
    :param header: a dataframe that contains key information for the characteristic that we need to filter the datapoints for   
    """      
    # We set the characteristics of the plot
    gridsize = (4,4)
    fig = plt.figure(figsize = (12.8,9.6))
    plt.Figure(dpi=500)
    # We create 2 axes: ax1 for the top part where it will hold the graph and ax3 for the information table
    ax1 = plt.subplot2grid(gridsize,(0,0),colspan = 4, rowspan = 3)
    ax3 = plt.subplot2grid(gridsize, (3, 0),colspan = 4, rowspan = 1)
        
    # We define ax1 as the current axe on the plot
    plt.sca(ax1)        
        
    # we plot a kde graph based on a dataframe
    data[f'{attribute}'].plot.kde(title = f'Prob and Cum (PDF/CDF) Density Functions of {name_graph} and {attribute}',ax=ax1)
  
    # we define the axises
    ax1.set_xlabel(f'{name_graph} {attribute}', fontsize = 16)
    ax1.set_ylabel("PDF Frecuency",color="blue",fontsize=16)
        
    # We create a twin object for two different y-axis on the sample plot
    ax2=ax1.twinx()
        
    # We plot the cdf (cumulative distribution function)
    ax2.plot(data[f'{attribute}'], data['cdf'],color="green")
    # We name the Y axis
    ax2.set_ylabel("% of measurements",color="red",fontsize=16)
        
    # We set ax3 as the current axes 
    plt.sca(ax3)
    # We hide all the axises and borders
    ax3.get_xaxis().set_visible(False)
    ax3.get_yaxis().set_visible(False)
    plt.box(on=None)
    
    header = header.astype(str)
    summary_table = header[['qty_artists','qty_songs','songs_per_artist','start_parsing','end_parsing','mean','min','max']]
    columns_list = header.columns.tolist()
    # We use the dataframe to create a table
    table = plt.table(cellText=summary_table.values,colLabels=columns_list,cellLoc = 'center', rowLoc = 'center',loc='center'\
        ,colWidths=[0.15,0.15,0.15,0.15,0.15,0.1,0.1,0.1]
    )
       
    # We set auto set font size to false to speed up the canvas drawing process
    table.auto_set_font_size(False)    
        
    # We increase the scale of the row height
    table.scale(1, 2)
    # We save and close the figure
    plt.savefig(f"{path}/cdf_{name_graph}_{attribute}_{start_year}_{end_year}.jpg")
    plt.close()